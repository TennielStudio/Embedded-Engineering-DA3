
DA3Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ca  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036b  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	
	//---------------------------------------------------------------
	// INITIALIZE ADC VALUES
	//---------------------------------------------------------------

	ADMUX = 0; // use ADC0
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
  ac:	80 81       	ld	r24, Z
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	80 83       	st	Z, r24
	ADCSRB = 0; // 0 for free running mode
  b2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA |= (1 << ADEN); // Enable the ADC
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable Interrupts
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start the ADC conversion
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	//---------------------------------------------------------------
	// INITIALIZE UART VALUES 
	//---------------------------------------------------------------
	
	/*Set baud rate */
	UBRR0H = ((MYUBRR) >> 8); //Shift to store the upper 8 bits
  c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR; //Store lower bits
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); // Enable receiver and transmitter
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stop, no parity bit
  dc:	e2 ec       	ldi	r30, 0xC2	; 194
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
	
	
	//---------------------------------------------------------------
	// INITIALIZE TIMER INTERRUPT VALUES (Timer 1)
	//---------------------------------------------------------------
	TCCR1A = 0; //Normal mode
  e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << CS12) | (1 << CS10); //Prescaler is 1024
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	TCNT1 = 49911; //Calculation to start the timer
  f0:	87 ef       	ldi	r24, 0xF7	; 247
  f2:	92 ec       	ldi	r25, 0xC2	; 194
  f4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  f8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 = (1 << TOIE1); //Enable Timer 1 Overflow Interrupt
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	sei(); // Enables the interrupts
 102:	78 94       	sei
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x74>

00000106 <__vector_21>:
	}
}


ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
	ADCvalue = ADCH * 2; // Manipulate ADCH value to get temperature
 112:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 116:	88 0f       	add	r24, r24
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_13>:


ISR(TIMER1_OVF_vect) {
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	TCNT1 = 49911; //Calculation to start the timer
 13a:	87 ef       	ldi	r24, 0xF7	; 247
 13c:	92 ec       	ldi	r25, 0xC2	; 194
 13e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 142:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIFR1 = (1 << TOV1); //Interrupt flag register gets overflow flag set when overflow occurs
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	86 bb       	out	0x16, r24	; 22
	while(!(UCSR0A & (1 << UDRE0))); //
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	85 ff       	sbrs	r24, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <__vector_13+0x26>
	UDR0 = ADCvalue;
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
